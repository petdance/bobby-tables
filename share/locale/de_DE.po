# Header entry was created by KBabel!
#
# Lars Dɪᴇᴄᴋᴏᴡ 迪拉斯 <daxim@cpan.org>, 2010.
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: YEAR-MO-DA HO:MI+ZONE\n"
"PO-Revision-Date: 2010-02-16 20:37+0100\n"
"Last-Translator: Lars Dɪᴇᴄᴋᴏᴡ 迪拉斯 <daxim@cpan.org>\n"
"Language-Team: German <>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Lokalize 1.0\n"
"Plural-Forms: nplurals=2; plural=n != 1;\n"

#: s/plsql.textile.tt2:138 s/plsql.textile.tt2:189
msgid ""
"    FOR i IN v_users.FIRST .. v_users.LAST LOOP\n"
"      PIPE ROW(v_users(i));\n"
"    END LOOP;"
msgstr ""

#: s/plsql.textile.tt2:142 s/plsql.textile.tt2:193
msgid ""
"    RETURN;\n"
"END;\n"
"/\n"
"</code>"
msgstr ""

#: s/scheme.textile.tt2:5
msgid ""
"\"CHICKEN\":http://www.call-with-current-continuation.org/ is a compiler for "
"\"Scheme\":http://schemers.org/"
msgstr ""
"\"CHICKEN\":http://www.call-with-current-continuation.org/ ist ein Compiler "
"für \"Scheme\":http://schemers.org/"

#: s/java.textile.tt2:11
msgid ""
"\"Hibernate\":http://docs.jboss.org/hibernate/stable/core/reference/en/html/"
"objectstate.html#objectstate-querying-executing-parameters also supports "
"prepared statements."
msgstr ""
"\"Hibernate\":http://docs.jboss.org/hibernate/stable/core/reference/en/html/"
"objectstate.html#objectstate-querying-executing-parameters beherrscht auch "
"vorbereitete Anweisungen."

#: s/perl.textile.tt2:20
msgid ""
"# Assume @cols contains a list of column names you need to fetch:\n"
"my $cols = join ',', map { $dbh->quote_identifier($_) } @cols;"
msgstr ""

#: s/php.textile.tt2:47
msgid ""
"$sth = $dbh->prepare('SELECT * FROM users WHERE email = :email');\n"
"$sth->execute(array(':email' => $email));\n"
"</code>"
msgstr ""
"$sth = $dbh->prepare('SELECT * FROM users WHERE email = :email');\n"
"$sth->execute(array(':email' => $email));\n"
"</code>"

#: s/index.textile.tt2:59
#, fuzzy
msgid ""
"* \"Peter Ward\":http://identi.ca/flowblok/\n"
"* \"David Wheeler\":http://justatheory.com\n"
"* Scott Rose\n"
"* Erik Osheim\n"
"* Russ Sivak\n"
"* \"Iain Collins\":http://iaincollins.com\n"
"* Kristoffer Sall Hansen\n"
"* Jeff Emminger\n"
"* \"Travis Swicegood\":http://www.travisswicegood.com/\n"
"* \"Will Coleda\":http://www.coleda.com/users/coke/\n"
"* Kai Baesler\n"
"* Mike Markley\n"
"* \"Michael Schwern\":http://schwern.dreamhosters.com/\n"
"* \"Jeana Clark\":http://jeanaclark.org/\n"
"* \"Lars Dɪᴇᴄᴋᴏᴡ\":http://search.cpan.org/~daxim/\n"
"* \"Jani Hur\":http://www.jani-hur.net"
msgstr ""
"* Scott Rose\n"
"* Erik Osheim\n"
"* Russ Sivak\n"
"* \"Iain Collins\":http://iaincollins.com\n"
"* Kristoffer Sall Hansen\n"
"* Jeff Emminger\n"
"* \"Travis Swicegood\":http://www.travisswicegood.com/\n"
"* \"Will Coleda\":http://www.coleda.com/users/coke/\n"
"* Kai Baesler\n"
"* Mike Markley\n"
"* \"Michael Schwern\":http://schwern.dreamhosters.com/\n"
"* \"Jeana Clark\":http://jeanaclark.org/\n"
"* \"Lars Dɪᴇᴄᴋᴏᴡ\":http://search.cpan.org/~daxim/\n"

#: s/index.textile.tt2:32
#, fuzzy
msgid ""
"* \"SQL Injection Myths and Fallacies\":http://www.slideshare.net/billkarwin/"
"sql-injection-myths-and-fallacies\n"
"* \"http://www.schneier.com/blog/archives/2008/10/how_to_write_in.html\":"
"http://www.schneier.com/blog/archives/2008/10/how_to_write_in.html\n"
"* \"http://st-curriculum.oracle.com/tutorial/SQLInjection/\":http://st-"
"curriculum.oracle.com/tutorial/SQLInjection/"
msgstr ""
"* \"http://www.schneier.com/blog/archives/2008/10/how_to_write_in.html\":"
"http://www.schneier.com/blog/archives/2008/10/how_to_write_in.html\n"
"* \"http://st-curriculum.oracle.com/tutorial/SQLInjection/\":http://st-"
"curriculum.oracle.com/tutorial/SQLInjection/"

#: s/dotnet.textile.tt2:9
msgid ""
"* \"SQL injection\":http://msdn.microsoft.com/en-us/library/ms161953.aspx on "
"MSDN\n"
"* \"SQL Injection and how to avoid it\":http://blogs.msdn.com/tom/"
"archive/2008/05/29/sql-injection-and-how-to-avoid-it.aspx on the ASP.NET "
"Debugging blog"
msgstr ""
"* \"SQL injection\":http://msdn.microsoft.com/en-us/library/ms161953.aspx "
"auf MSDN\n"
"* \"SQL Injection and how to avoid it\":http://blogs.msdn.com/tom/"
"archive/2008/05/29/sql-injection-and-how-to-avoid-it.aspx auf dem Blog \"ASP."
"NET Debugging\""

#: s/dotnet.textile.tt2:5
msgid ""
"* \"SqlCommand.Prepare\":http://msdn.microsoft.com/en-us/library/system.data."
"sqlclient.sqlcommand.prepare.aspx in the .NET Framework Class Library"
msgstr ""
"* \"SqlCommand.Prepare\":http://msdn.microsoft.com/en-us/library/system.data."
"sqlclient.sqlcommand.prepare.aspx in der Klassenbibliothek des .NET-Framework"

#: s/java.textile.tt2:15
msgid "* Add some narrative\n"
msgstr "* Mehr Erläuterung\n"

#: s/dotnet.textile.tt2:14
msgid ""
"* Add some narrative\n"
"* Show code examples"
msgstr ""
"* Mehr Erläuterung\n"
"* Codebeispiele zeigen"

#: s/python.textile.tt2:19 s/ruby.textile.tt2:19 s/scheme.textile.tt2:16
msgid "* Add some narrative.\n"
msgstr "* Mehr Erläuterung.\n"

#: s/index.textile.tt2:19
msgid ""
"* Do not create SQL statements that include outside data.\n"
"* Use parameterized SQL calls."
msgstr ""
"* indem man keine SQL-Anweisungen erstellt, die von außen kommende Daten "
"enthalten.\n"
"* indem man SQL-Aufrufe mit Parametern tätigt."

#: s/index.textile.tt2:52
msgid ""
"* Explain why creating code from outside data is bad.\n"
"* Potential speed win when reusing prepared statements."
msgstr ""
"* Erklärung, warum es schlecht ist, Anweisung auf Grundlage von außerhalb "
"kommender Daten zu erzeugen.\n"
"* Möglicher Geschwindigkeitszuwachs unter Wiederverwendung vorbereiteter "
"Anweisungen."

#: s/index.textile.tt2:40
msgid ""
"* Fork the \"bobby-tables repository at github\":http://github.com/petdance/"
"bobby-tables, make your changes, and send me a pull request.\n"
"* Add an issue in the \"issue tracker\":http://github.com/petdance/bobby-"
"tables/issues.\n"
"* Email me, Andy Lester, at andy at petdance.com."
msgstr ""
"* Erstelle einen Fork vom \"Repository bobby-tables auf github\":http://"
"github.com/petdance/bobby-tables, füge die Änderungen hinzu und schicke mir "
"einen Pull-Request.\n"
"* Erstelle eine Anfrage im \"Fallbearbeitungssystem\":http://github.com/"
"petdance/bobby-tables/issues.\n"
"* Schicke mir eine Email: Andy Lester, andy at petdance.com."

#: s/php.textile.tt2:11
msgid ""
"*However*, you should probably be using an abstraction layer.  The \"ODBC\":"
"http://php.net/manual/en/book.uodbc.php and \"PDO\":http://www.php.net/"
"manual/en/book.pdo.php extensions both support parameterization and multiple "
"databases:"
msgstr ""
"Es sollte jedoch wohl eine Abstraktionsschicht verwendet werden.  Die \"ODBC-"
"\":http://php.net/manual/en/book.uodbc.php und \"PDO-Erweiterungen\":http://"
"www.php.net/manual/en/book.pdo.php unterstützen sowohl Parameterisierung und "
"mehrere Datenbanken:"

#: s/php.textile.tt2:61
msgid ""
"// insert one row\n"
"$name = 'one';\n"
"$value = 1;\n"
"$stmt->execute();\n"
"</code>"
msgstr ""
"// eine Zeile einfügen\n"
"$name = 'one';\n"
"$value = 1;\n"
"$stmt->execute();\n"
"</code>"

#: s/csharp.textile.tt2:13
msgid ""
"// userName is some string valued user input variable\n"
"userNameParam.Value = userName;\n"
"</code>"
msgstr ""
"// userName ist eine vom Benutzer eingegebene Stringvariable\n"
"userNameParam.Value = userName;\n"
"</code>"

#: s/plsql.textile.tt2:114 s/plsql.textile.tt2:48
msgid "</code>"
msgstr ""

#: s/coldfusion.textile.tt2:19
msgid ""
"<code>\n"
"  &lt;cfscript>\n"
"    var myQuery = new Query(sql=\"\n"
"      SELECT FirstName, LastName, Phone\n"
"      FROM   tblUser\n"
"      WHERE  Status = :status\n"
"    \");\n"
"    myQuery.addParam(\n"
"      name      = \"status\",\n"
"      value     = form.status,\n"
"      cfsqltype = \"cf_sql_varchar\"\n"
"    );\n"
"    var rawQuery = myQuery.execute().getResult();\n"
"  &lt;/cfscript>\n"
"</code>\n"
msgstr ""

#: s/python.textile.tt2:5
#, fuzzy
msgid ""
"<code>\n"
"# Do NOT do it this way.\n"
"cmd = \"update people set name='%s' where id='%s'\" % (name, id)\n"
"curs.execute(cmd)\n"
"</code>"
msgstr ""
"<code>\n"
"# Dieses Beispiel ist FALSCH.\n"
"cmd = 'update people set name='%s' where id='%s'%(name, id)\n"
"curs.execute(cmd)\n"
"</code>"

#: s/perl.textile.tt2:16
msgid ""
"<code>\n"
"# Make sure a table name we want to use is safe:\n"
"my $quoted_table_name = $dbh->quote_identifier($table_name);"
msgstr ""

#: s/php.textile.tt2:27
msgid ""
"<code>\n"
"$dbConnection = NewADOConnection($connectionString);\n"
"$sqlResult = $dbConnection->Execute(\n"
"    'SELECT user_id,first_name,last_name FROM users WHERE username=? AND "
"password=?',\n"
"    array($_REQUEST['username'], sha1($_REQUEST['password'])\n"
");\n"
"</code>"
msgstr ""
"<code>\n"
"$dbConnection = NewADOConnection($connectionString);\n"
"$sqlResult = $dbConnection->Execute(\n"
"    'SELECT user_id,first_name,last_name FROM users WHERE username=? AND "
"password=?',\n"
"    array($_REQUEST['username'], sha1($_REQUEST['password'])\n"
");\n"
"</code>"

#: s/php.textile.tt2:55
msgid ""
"<code>\n"
"$dbh = new PDO('mysql:dbname=testdb;host=127.0.0.1', $user, $password);\n"
"$stmt = $dbh->prepare('INSERT INTO REGISTRY (name, value) VALUES (:name, :"
"value)');\n"
"$stmt->bindParam(':name', $name);\n"
"$stmt->bindParam(':value', $value);"
msgstr ""
"<code>\n"
"$dbh = new PDO('mysql:dbname=testdb;host=127.0.0.1', $user, $password);\n"
"$stmt = $dbh->prepare('INSERT INTO REGISTRY (name, value) VALUES (:name, :"
"value)');\n"
"$stmt->bindParam(':name', $name);\n"
"$stmt->bindParam(':value', $value);"

#: s/php.textile.tt2:69
msgid ""
"<code>\n"
"$dbh = new PDO('mysql:dbname=testdb;host=127.0.0.1', $user, $password);\n"
"$stmt = $dbh->prepare('UPDATE people SET name = :new_name WHERE id = :id');\n"
"$stmt->execute( array('new_name' => $name, 'id' => $id) );\n"
"</code>\n"
msgstr ""
"<code>\n"
"$dbh = new PDO('mysql:dbname=testdb;host=127.0.0.1', $user, $password);\n"
"$stmt = $dbh->prepare('UPDATE people SET name = :new_name WHERE id = :id');\n"
"$stmt->execute( array('new_name' => $name, 'id' => $id) );\n"
"</code>\n"

#: s/php.textile.tt2:44
msgid ""
"<code>\n"
"$res = odbc_exec($conn, 'SELECT * FROM users WHERE email = ?', array"
"($email));"
msgstr ""
"<code>\n"
"$res = odbc_exec($conn, 'SELECT * FROM users WHERE email = ?', array"
"($email));"

#: s/php.textile.tt2:5
msgid ""
"<code>\n"
"$result = pg_query_params( $dbh, 'SELECT * FROM users WHERE email = $1', "
"array($email) );\n"
"</code>"
msgstr ""
"<code>\n"
"$result = pg_query_params( $dbh, 'SELECT * FROM users WHERE email = $1', "
"array($email) );\n"
"</code>"

#: s/perl.textile.tt2:5
msgid ""
"<code>\n"
"$sth = $dbh->prepare(\"SELECT * FROM users WHERE email = ?\");\n"
"foreach my $email (@emails) {\n"
"    $sth->execute($email);\n"
"    $row = $sth->fetchrow_hashref;\n"
"    [...]\n"
"}\n"
"</code>"
msgstr ""
"<code>\n"
"$sth = $dbh->prepare(\"SELECT * FROM users WHERE email = ?\");\n"
"foreach my $email (@emails) {\n"
"    $sth->execute($email);\n"
"    $row = $sth->fetchrow_hashref;\n"
"    [...]\n"
"}\n"
"</code>"

#: s/php.textile.tt2:17
msgid ""
"<code>\n"
"$stmt = $db->prepare('update people set name = ? where id = ?');\n"
"$stmt->bind_param('si',$name,$id);\n"
"$stmt->execute();\n"
"</code>"
msgstr ""
"<code>\n"
"$stmt = $db->prepare('update people set name = ? where id = ?');\n"
"$stmt->bind_param('si',$name,$id);\n"
"$stmt->execute();\n"
"</code>"

#: s/php.textile.tt2:37
msgid ""
"<code>\n"
"$stmt = odbc_prepare( $conn, 'SELECT * FROM users WHERE email = ?' );\n"
"$success = odbc_execute( $stmt, array($email) );\n"
"</code>"
msgstr ""
"<code>\n"
"$stmt = odbc_prepare( $conn, 'SELECT * FROM users WHERE email = ?' );\n"
"$success = odbc_execute( $stmt, array($email) );\n"
"</code>"

#: s/coldfusion.textile.tt2:5
#, fuzzy
msgid ""
"<code>\n"
"&lt;cfquery name=\"queryTest\">\n"
"SELECT FirstName, LastName, Phone\n"
"FROM   tblUser\n"
"WHERE  Status =\n"
"    &lt;cfqueryparam cfsqltype=\"CF_SQL_VARCHAR\" value=\"#form.status#\">\n"
"&lt;/cfquery>\n"
"</code>"
msgstr ""
"<code>\n"
"&lt;cfquery datasource=\"#application.dsn#\" name=\"qryTest\" maxrows="
"\"#intRows#\">\n"
"SELECT FirstName, LastName, Phone\n"
"FROM   tblUser\n"
"WHERE  Status =\n"
"    &lt;cfqueryparam cfsqltype=\"CF_SQL_VARCHAR\" value=\"#form.status#\">\n"
"&lt;/cfquery>\n"
"</code>"

#: s/scheme.textile.tt2:7
msgid ""
"<code>\n"
"(define DB (sqlite3:open  \"myexample.db\"))\n"
"(sqlite3:exec DB \"INSERT INTO Person(name) VALUES(?)\" \"Luke Skywalker\")\n"
"(sqlite3:for-each-row print DB \"SELECT id,name FROM Person WHERE id=?\" 3)\n"
"(define adults (sqlite3:map-row DB \"SELECT name FROM Person WHERE age >= ?"
"\" 18)\n"
"</code>"
msgstr ""
"<code>\n"
"(define DB (sqlite3:open  \"myexample.db\"))\n"
"(sqlite3:exec DB \"INSERT INTO Person(name) VALUES(?)\" \"Luke Skywalker\")\n"
"(sqlite3:for-each-row print DB \"SELECT id,name FROM Person WHERE id=?\" 3)\n"
"(define adults (sqlite3:map-row DB \"SELECT name FROM Person WHERE age >= ?"
"\" 18)\n"
"</code>"

#: s/plsql.textile.tt2:122 s/plsql.textile.tt2:173
msgid ""
"<code>\n"
"ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS';"
msgstr ""

#: s/plsql.textile.tt2:147 s/plsql.textile.tt2:200
msgid ""
"<code>\n"
"ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD\"SUPRISE!\"';\n"
"SELECT COLUMN_VALUE AS \"REGULARS\" FROM TABLE(users_since(sysdate - 30));"
msgstr ""

#: s/plsql.textile.tt2:54
msgid ""
"<code>\n"
"CREATE OR REPLACE FUNCTION user_access (\n"
"    p_uname IN VARCHAR2\n"
") RETURN date AS\n"
"    v_accessed_at date;\n"
"    v_query constant varchar2(32767) := \n"
"      'SELECT accessed_at FROM users WHERE username = ''' || p_uname || "
"'''';\n"
"BEGIN\n"
"    EXECUTE IMMEDIATE v_query INTO v_accessed_at;\n"
"    RETURN v_accessed_at;\n"
"END;\n"
"/\n"
"</code>"
msgstr ""

#: s/plsql.textile.tt2:86
msgid ""
"<code>\n"
"CREATE OR REPLACE FUNCTION user_access (\n"
"    p_uname IN VARCHAR2\n"
") RETURN date AS\n"
"    v_accessed_at date;\n"
"    v_query constant varchar2(32767) := \n"
"      'SELECT accessed_at FROM users WHERE username = :a';\n"
"BEGIN\n"
"    EXECUTE IMMEDIATE v_query INTO v_accessed_at USING p_uname;\n"
"    RETURN v_accessed_at;\n"
"END;\n"
"/\n"
"</code>"
msgstr ""

#: s/plsql.textile.tt2:22
#, fuzzy
msgid ""
"<code>\n"
"CREATE OR REPLACE FUNCTION user_access (\n"
"    p_uname IN VARCHAR2\n"
") RETURN date AS\n"
"    v_accessed_at date;\n"
"BEGIN\n"
"    SELECT accessed_at INTO v_accessed_at FROM users WHERE username = "
"p_uname;\n"
"    RETURN v_accessed_at;\n"
"END;\n"
"/\n"
"</code>"
msgstr ""
"bc. CREATE OR REPLACE FUNCTION user_access (\n"
"    p_uname TEXT\n"
") RETURNS timestamp language plpgsql AS $$\n"
"BEGIN\n"
"    RETURN accessed_at FROM users WHERE username = p_uname;\n"
"END;\n"
"$$;"

#: s/plsql.textile.tt2:5
msgid ""
"<code>\n"
"CREATE TABLE users (\n"
"    username VARCHAR2(8) UNIQUE,\n"
"    accessed_at DATE,\n"
"    superuser NUMBER(1,0)\n"
");"
msgstr ""

#: s/ruby.textile.tt2:5
msgid ""
"<code>\n"
"Person.find :all, :conditions => ['id = ? or name = ?', id, name]\n"
"</code>"
msgstr ""
"<code>\n"
"Person.find :all, :conditions => ['id = ? or name = ?', id, name]\n"
"</code>"

#: s/ruby.textile.tt2:11
msgid ""
"<code>\n"
"Person.find_by_sql ['SELECT * from persons WHERE name = ?', name]\n"
"</code>"
msgstr ""
"<code>\n"
"Person.find_by_sql ['SELECT * from persons WHERE name = ?', name]\n"
"</code>"

#: s/java.textile.tt2:3
#, fuzzy
msgid ""
"<code>\n"
"PreparedStatement statement = connection.prepareStatement(\n"
"    \"update people set name = ? where id = ?\");\n"
"statement.setString(1, name);\n"
"statement.setString(2, id);\n"
"statement.execute();\n"
"</code>"
msgstr ""
"<code>\n"
"PreparedStatement statement = connection.prepareStatement(\n"
"    \"update people set name = ? where id = ?\");\n"
"statement.setString(0, name);\n"
"statement.setString(1, id);\n"
"statement.execute();\n"
"</code>"

#: s/plsql.textile.tt2:100 s/plsql.textile.tt2:34 s/plsql.textile.tt2:68
msgid ""
"<code>\n"
"SELECT user_access('janihur')\n"
"  AS \"JANIHUR LAST SEEN\" FROM DUAL;"
msgstr ""

#: s/csharp.textile.tt2:5
msgid ""
"<code>\n"
"SqlCommand userInfoQuery = new SqlCommand(\n"
"    \"SELECT id, name, email FROM users WHERE id = @UserName\",\n"
"    someSqlConnection);"
msgstr ""
"<code>\n"
"SqlCommand userInfoQuery = new SqlCommand(\n"
"    \"SELECT id, name, email FROM users WHERE id = @UserName\",\n"
"    someSqlConnection);"

#: s/csharp.textile.tt2:19
msgid ""
"<code>\n"
"String username = \"joe.bloggs\";\n"
"SqlCommand sqlQuery = new SqlCommand(\"SELECT user_id, first_name,last_name "
"FROM users WHERE username = ?username\",  sqlConnection);\n"
"sqlQuery.Parameters.AddWithValue(\"?username\", username);\n"
"</code>\n"
msgstr ""
"<code>\n"
"String username = \"joe.bloggs\";\n"
"SqlCommand sqlQuery = new SqlCommand(\"SELECT user_id, first_name,last_name "
"FROM users WHERE username = ?username\",  sqlConnection);\n"
"sqlQuery.Parameters.AddWithValue(\"?username\", username);\n"
"</code>\n"

#: s/python.textile.tt2:13
msgid ""
"<code>\n"
"curs.execute('update people set name=:1 where id=:2', [name, id])\n"
"</code>"
msgstr ""
"<code>\n"
"curs.execute('update people set name=:1 where id=:2', [name, id])\n"
"</code>"

#: s/asp.textile.tt2:3
msgid ""
"<code>\n"
"objCmd.CommandType = adCmdText;\n"
"objCmd.CommandText = \"UPDATE members SET photo = @filename WHERE memberID = "
"@memberID\";\n"
"objCmd.Parameters.Append(objCmd.CreateParameter(\"@memberID\", adInteger, "
"adParamInput, 4, memberid ));\n"
"objCmd.Parameters.Append(objCmd.CreateParameter(\"@filename\", adVarChar, "
"adParamInput, 510, fileName));\n"
"objCmd.Execute(adExecuteNoRecords);\n"
"gblDelobjParams(objCmd);\n"
"</code>"
msgstr ""
"<code>\n"
"objCmd.CommandType = adCmdText;\n"
"objCmd.CommandText = \"UPDATE members SET photo = @filename WHERE memberID = "
"@memberID\";\n"
"objCmd.Parameters.Append(objCmd.CreateParameter(\"@memberID\", adInteger, "
"adParamInput, 4, memberid ));\n"
"objCmd.Parameters.Append(objCmd.CreateParameter(\"@filename\", adVarChar, "
"adParamInput, 510, fileName));\n"
"objCmd.Execute(adExecuteNoRecords);\n"
"gblDelobjParams(objCmd);\n"
"</code>"

#: s/delphi.textile.tt2:5
msgid ""
"<code>\n"
"query.SQL.Text := 'update people set name=:Name where id=:ID';\n"
"query.Prepare;\n"
"query.ParamByName( 'Name' ).AsString := name;\n"
"query.ParamByName( 'ID' ).AsInteger := id;\n"
"query.ExecSQL;\n"
"</code>\n"
msgstr ""
"<code>\n"
"query.SQL.Text := 'update people set name=:Name where id=:ID';\n"
"query.Prepare;\n"
"query.ParamByName( 'Name' ).AsString := name;\n"
"query.ParamByName( 'ID' ).AsInteger := id;\n"
"query.ExecSQL;\n"
"</code>\n"

#: s/index.textile.tt2:3
msgid ""
"<p>\n"
"<a href=\"http://xkcd.com/327/\"><img src=\"img/xkcd.png\" alt=\"xkcd Bobby "
"Tables Cartoon\" /></a>\n"
"<a href=\"http://xkcd.com/327/\">From the comic strip xkcd</a><br />\n"
"<b>School</b>: \"Hi, this is your son's school.  We're having some computer "
"trouble.\"<br />\n"
"<b>Mom</b>: \"Oh, dear -- Did he break something?\"<br />\n"
"<b>School</b>: \"In a way.  Did you really name your son Robert'); DROP "
"TABLE Students;-- ?\"<br />\n"
"<b>Mom</b>: \"Oh.  Yes.  Little Bobby Tables we call him.\"<br />\n"
"<b>School</b>: \"Well, we've lost this year's student records.  I hope "
"you're happy.\"<br />\n"
"<b>Mom</b>: \"And I hope you've learned to sanitize your database inputs."
"\"<br />\n"
"(title text: \"Her daughter is named Help I'm trapped in a driver's license "
"factory.\")\n"
"</p>"
msgstr ""
"<p>\n"
"<a href=\"http://xkcd.com/327/\"><img src=\"../img/xkcd.png\" alt=\"xkcd-"
"Comic BobbyTables\" /></a>\n"
"<a href=\"http://xkcd.com/327/\">Vom Comic xkcd</a><br />\n"
"<b>Schule</b>: \"Hallo, hier spricht die Schule Ihres Sohnes.  Wir haben "
"Computerprobleme.\"<br />\n"
"<b>Mutter</b>: \"Auweia – hat er etwas kaputtgemacht?\"<br />\n"
"<b>Schule</b>: \"So ähnlich.  Haben sie wirklich Ihren Sohn Robert'); DROP "
"TABLE Students;-- genannt?\"<br />\n"
"<b>Mutter</b>: \"Oh.  Ja.  Wir rufen ihn Klein Bobby Tables.\"<br />\n"
"<b>Schule</b>: \"Also, der Datenbestand der Schüler dieses Jahres ist "
"futsch.  Ich hoffe, Sie sind jetzt glücklich.\"<br />\n"
"<b>Mutter</b>: \"Und ich hoffe, Sie haben gelernt, Datenbankeingaben zu "
"säubern.\"<br />\n"
"(Titeltext: \"Ihre Tochter heißt Hilfe ich werde in einer Führerscheinfabrik "
"gefangengehalten.\")\n"
"</p>"

#: s/php.textile.tt2:25
msgid ""
"ADODB provides a way to prepare, bind and execute all in the same method "
"call."
msgstr ""
"Mit ADODB kann man in einem Methodenaufruf eine Anweisung vorbereiten, daran "
"binden und sie ausführen."

#: s/plsql.textile.tt2:160
msgid ""
"ALTER SESSION SET NLS_DATE_FORMAT = '\"'' or superuser = 1 or username = "
"''whocares\"';\n"
"SELECT COLUMN_VALUE AS \"SUPERUSER IS\" FROM TABLE(users_since(sysdate - "
"30));"
msgstr ""

#: s/asp.textile.tt2:14
msgid "Add some narrative\n"
msgstr "Mehr Erläuterung\n"

#: s/postgresql.textile.tt2:3
msgid ""
"All of PostgreSQL's \"procedural languages\":http://www.postgresql.org/docs/"
"current/static/xplang.html, which allow you to write functions and "
"procedures inside the database, allow you to execute arbitrary SQL "
"statements."
msgstr ""
"Alle \"prozeduralen Sprachen von PostgreSQL\":http://www.postgresql.org/docs/"
"current/static/xplang.html, mit denen man Funktionen und Prozeduren "
"innerhalb der Datenbank schreiben kann, haben die Fähigkeit, beliebige SQL-"
"Anweisungen auszuführen."

#: s/plsql.textile.tt2:118
msgid ""
"Also NLS session parameters (NLS_DATE_FORMAT, NLS_TIMESTAMP_FORMAT, "
"NLS_TIMESTAMP_TZ_FORMAT, NLS_NUMERIC_CHARACTER) can be used to modify or "
"inject SQL statements."
msgstr ""

#: s/php.textile.tt2:67
msgid "And a shorter way to pass things in."
msgstr "Und auf eine kürzere Weise, sie zu übergeben."

#: s/dotnet.textile.tt2:7
msgid "Articles:"
msgstr "Artikel:"

#: tt/header.tt:6
msgid "Bobby Tables: A guide to preventing SQL injection"
msgstr "Bobby Tables: Ein Leitfaden gegen SQL-Einschleusung"

#: s/postgresql.textile.tt2:42
msgid ""
"Both the @p_column@ and the @p_value@ arguments are vulnerable. The way to "
"avoid this problem is to use the @quote_ident()@ function to quote an SQL "
"identifier (@p_column@ in this case) and @quote_lteral()@ to quote a literal "
"value:"
msgstr ""
"Die Argumente @p_column@ und @p_value@ sind beide angreifbar. Um das Problem "
"zu vermeiden, wird die Funktion @quote_ident()@ verwendet, um einen SQL-"
"Bezeichner (hier: @p_column@) zu maskieren und @quote_literal()@, um einen "
"Literalwert zu maskieren:"

#: s/postgresql.textile.tt2:25
#, fuzzy
msgid ""
"But sometimes you have to do more complicated things. Perhaps you "
"dynamically add @WHERE@ clause expressions based on input. In such cases, "
"you'll end up using PL/pgSQL's @EXECUTE@ syntax. Here's an example with an "
"SQL injection vulnerability:"
msgstr ""
"Aber manchmal möchte man kompliziertere Sachen machen wie z.B. @WHERE@-"
"Teilausdrücke dynamisch je nach Eingabedaten hinzuzufügen. In diesem Fall "
"benutzt man die @EXECUTE@-Syntax von PL/pgSQL. Ein Beispiel mit einer "
"Gefährdung durch SQL-Einschleusung:"

#: s/plsql.textile.tt2:128
msgid ""
"CREATE OR REPLACE FUNCTION users_since(\n"
"    p_since IN DATE\n"
") RETURN userlist_t PIPELINED AS\n"
"    v_users userlist_t;\n"
"    v_query constant varchar2(32767) := \n"
"      'SELECT username FROM users WHERE superuser = 0 and accessed_at > ''' "
"|| p_since || ''' order by accessed_at desc';\n"
"BEGIN\n"
"    DBMS_OUTPUT.PUT_LINE('v_query = ' || v_query);\n"
"    EXECUTE IMMEDIATE v_query BULK COLLECT INTO v_users;"
msgstr ""

#: s/plsql.textile.tt2:179
msgid ""
"CREATE OR REPLACE FUNCTION users_since(\n"
"    p_since IN DATE\n"
") RETURN userlist_t PIPELINED AS\n"
"    v_users userlist_t;\n"
"    v_query constant varchar2(32767) := \n"
"      'SELECT username FROM users WHERE superuser = 0 and accessed_at > ''' "
"|| to_char(p_since, 'YYYY-MM-DD') || ''' order by accessed_at desc';\n"
"BEGIN\n"
"    DBMS_OUTPUT.PUT_LINE('v_query = ' || v_query);\n"
"    EXECUTE IMMEDIATE v_query BULK COLLECT INTO v_users;"
msgstr ""

#: s/plsql.textile.tt2:125 s/plsql.textile.tt2:176
msgid ""
"CREATE OR REPLACE TYPE userlist_t AS TABLE OF VARCHAR2(8);\n"
"/"
msgstr ""

#: s/index.textile.tt2:38
msgid ""
"Don't see a language that you'd like to see represented?  Please let me know "
"if you have updates or additions through one of these methods, in decreasing "
"order of preference."
msgstr ""
"Wird eine Sprache vermisst? Bitte melde Verbesserungen oder Ergänzungen auf "
"eine dieser drei Arten, in absteigender Reihenfolge der Bevorzugung."

#: s/plsql.textile.tt2:3
msgid "Examples assume the following table structure:"
msgstr ""

#: s/perl.textile.tt2:30
msgid ""
"Explain Perl's taint mode and how DBI supports taint mode, both inbound and "
"outbound.\n"
msgstr ""
"Erklärung zum Taintmodus von Perl und wie DBI den Taintmodus sowohl einwärts "
"als auch ausgehend unterstützt.\n"

#: s/postgresql.textile.tt2:17
msgid ""
"For such a simple case, you're actually better off writing a pure SQL "
"function:"
msgstr ""
"In so einem einfachen Fall schreibt man besser eine reine SQL-Funktion:"

#: tt/footer.tt:6
msgid "Fork me on GitHub"
msgstr "Mach auf GitHub mit"

#: s/csharp.textile.tt2:3
msgid ""
"From the \"C# Online\":http://en.csharp-online.net/ wiki page \"ASP.NET "
"Security Hacks--Avoiding SQL Injection\":http://en.csharp-online.net/ASP."
"NET_Security_Hacks%E2%80%94Avoiding_SQL_Injection"
msgstr ""
"\"ASP.NET Security Hacks — Avoiding SQL Injection\":http://en.csharp-online."
"net/ASP.NET_Security_Hacks%E2%80%94Avoiding_SQL_Injection aus dem \"C#-"
"Online-Wiki\":http://en.csharp-online.net/"

#: s/index.textile.tt2:46
msgid ""
"Help translate this site! There are only 100 phrases. No programming "
"necessary."
msgstr ""
"Hilf mit, diesen Webauftritt zu übersetzen! Es sind nur 100 Ausdrücke. Keine "
"Programmierung notwendig."

#: s/php.textile.tt2:53
msgid "Here's the long way to do bind parameters."
msgstr "So bindet man Parameter auf die ausführliche Weise."

#: s/perl.textile.tt2:14
msgid ""
"However, you can't use parameterization for identifiers (table names, column "
"names) so you need to use DBI's <tt>quote_identifier()</tt> method for that:"
msgstr ""

#: s/plsql.textile.tt2:12
msgid ""
"INSERT INTO users VALUES ('janihur',  sysdate,      0);\n"
"INSERT INTO users VALUES ('petdance', sysdate - 12, 1);\n"
"INSERT INTO users VALUES ('albundy',  sysdate - 3,  0);\n"
"INSERT INTO users VALUES ('donduck',  sysdate - 18, 0);\n"
"</code>"
msgstr ""

#: s/coldfusion.textile.tt2:3
#, fuzzy
msgid ""
"In ColdFusion there is a tag called @cfqueryparam@ that should be used "
"whenever writing inline queries."
msgstr ""
"In ColdFusion gibt es eine Funktion @cfqueryparam@, die immer benutzt werden "
"sollte, um eingebettete Abfragen zu schreiben."

#: s/ruby.textile.tt2:3
msgid ""
"In Ruby on Rails using \"ActiveRecord\":http://guides.rubyonrails.org/"
"active_record_querying.html:"
msgstr ""
"In Ruby on Rails mit \"ActiveRecord\":http://guides.rubyonrails.org/"
"active_record_querying.html:"

#: s/plsql.textile.tt2:120
msgid ""
"In next example data type conversion takes place when @p_since@ is "
"implicitly converted to a string for concatenation. Note how the value of "
"NLS_DATE_FORMAT affects to the query string in users_since()-function !"
msgstr ""

#: s/plsql.textile.tt2:84
msgid "Instead use bind variables:"
msgstr ""

#: s/python.textile.tt2:11
msgid "Instead, do this:"
msgstr "Stattdessen korrekt:"

#: s/postgresql.textile.tt2:59
msgid "It's quite a bit easier to read, too!"
msgstr "So ist es auch viel leichter zu lesen!"

#: s/plsql.textile.tt2:104 s/plsql.textile.tt2:38 s/plsql.textile.tt2:72
msgid ""
"JANIHUR LAST SEEN\n"
"-------------------\n"
"2011-08-03 17:11:24"
msgstr ""

#: s/php.textile.tt2:9
msgid ""
"Note that the query must be in single-quotes or have the @$@ escaped to "
"avoid PHP trying to parse it as a variable."
msgstr ""
"Hinweis: die Abfrage muss in einfachen Anführungszeichen stehen oder das @$@ "
"muss maskiert werden, damit PHP nicht versucht, es als Variable zu "
"analysieren."

#: s/plsql.textile.tt2:198
msgid ""
"Now the value of NLS parameter @NLS_DATE_FORMAT@ is ignored during the query."
msgstr ""

#: s/csharp.textile.tt2:17
msgid "Or simpler:"
msgstr "Oder einfacher:"

#: s/php.textile.tt2:42
msgid "Or:"
msgstr "Oder:"

#: s/php.textile.tt2:3
msgid ""
"PHP is a little more disorganized than how \"Perl handles parameters\":./"
"perl.html. The standard \"MySQL extension\":http://php.net/manual/en/book."
"mysql.php doesn't support parameterization, although the \"PostgreSQL "
"extension\":http://www.php.net/manual/en/book.pgsql.php does:"
msgstr ""
"PHP ist ein bisschen unorganisierter im \"Vergleich zu Perl\":./perl.html. "
"Die Standarderweiterung \"MySQL\":http://php.net/manual/de/book.mysql.php "
"beherrscht keine Parameterisierung, aber die Erweiterung \"PostgreSQL\":"
"http://www.php.net/manual/de/book.pgsql.php schon:"

#: s/perl.textile.tt2:3
#, fuzzy
msgid ""
"Perl's \"DBI\":http://search.cpan.org/dist/DBI, available on the \"CPAN\":"
"http://search.cpan.org, supports parameterized SQL calls.  Both the @do@ "
"method and @prepare@ method support parameters (\"placeholders\", as they "
"call them) for most database drivers. For example:"
msgstr ""
"Perl Datenbankschnittstelle \"DBI\":http://search.cpan.org/dist/DBI, "
"erhältlich vom \"CPAN\":http://search.cpan.org, beherrscht parameterisierte "
"SQL-Aufrufe. Die Methoden @do@ und @prepare@ unterstützen Parameter (dort: "
"\"Platzhalter\") für die meisten Datenbanktreiber. Zum Beispiel:"

#: s/plsql.textile.tt2:154
msgid ""
"REGULARS\n"
"--------\n"
"janihur\n"
"albundy\n"
"donduck"
msgstr ""

#: s/plsql.textile.tt2:207
msgid ""
"REGULARS\n"
"--------\n"
"janihur\n"
"albundy\n"
"donduck\n"
"</code>\n"
msgstr ""

#: s/coldfusion.textile.tt2:16
msgid ""
"Recent versions of ColdFusion provide a set of functions to run queries "
"that\n"
"have a slightly different syntax, but still provide parameterized queries."
msgstr ""

#: s/dotnet.textile.tt2:3
msgid "Reference:"
msgstr "Literaturhinweis:"

#: s/plsql.textile.tt2:108 s/plsql.textile.tt2:42 s/plsql.textile.tt2:76
msgid ""
"SELECT user_access('whocares'' or superuser = 1 or username = ''whocares') \n"
"  AS \"SUPERUSER LAST SEEN\" FROM DUAL;"
msgstr ""

#: s/plsql.textile.tt2:166
msgid ""
"SUPERUSE\n"
"--------\n"
"petdance\n"
"</code>"
msgstr ""

#: s/plsql.textile.tt2:111 s/plsql.textile.tt2:45
msgid ""
"SUPERUSER LAST SEEN\n"
"-------------------"
msgstr ""

#: s/plsql.textile.tt2:79
msgid ""
"SUPERUSER LAST SEEN\n"
"-------------------\n"
"2011-07-22 17:11:24\n"
"</code>"
msgstr ""

#: s/index.textile.tt2:48
msgid ""
"See the instructions at the \"bobby-tables repository at github\":http://"
"github.com/petdance/bobby-tables#readme."
msgstr ""
"Siehe Anleitung im \"Repository bobby-tables auf github\":http://github.com/"
"petdance/bobby-tables#readme."

#: s/index.textile.tt2:28
msgid "See the sidebar to the left for your specific language."
msgstr "Siehe Kasten links für die jeweilige Sprache."

#: s/csharp.textile.tt2:10
msgid ""
"SqlParameter userNameParam = userInfoQuery.Parameters.Add(\"@UserName\",\n"
"    SqlDbType.VarChar, 25 /* max length of field */ );"
msgstr ""
"SqlParameter userNameParam = userInfoQuery.Parameters.Add(\"@UserName\",\n"
"    SqlDbType.VarChar, 25 /* max length of field */ );"

#: s/plsql.textile.tt2:20
msgid "Static SQL leaves no room for SQL injection."
msgstr ""

#: s/coldfusion.textile.tt2:14
#, fuzzy
msgid ""
"Stored procedures can be invoked with the @cfstoredproc@ and @cfprocparam@ "
"tags."
msgstr ""
"Wenn man gespeicherte Prozeduren in der Datenbank hat, kann man sie mit den "
"Funktionen @cfstoredproc@ und @cfprocparam@ aufrufen."

#: s/plsql.textile.tt2:52
msgid "String concatenation opens doors to possible SQL injection exploits:"
msgstr ""

#: s/postgresql.textile.tt2:63 s/postgresql.textile.tt2:67
msgid "TODO."
msgstr "In Vorbereitung."

#: s/postgresql.textile.tt2:71
msgid "TODO.\n"
msgstr "In Vorbereitung.\n"

#: s/index.textile.tt2:57
msgid "Thanks to the following folks for their contributions:"
msgstr "Dank gilt den folgenden Leuten für ihre Mitwirkung:"

#: s/index.textile.tt2:22
msgid ""
"That's it. Don't try to escape invalid characters. Don't try to do it "
"yourself. Learn how to use parameterized statements. Always, every single "
"time."
msgstr ""
"Das ist alles. Nicht versuchen, ungültige Zeichen zu maskieren. Nicht "
"versuchen, es eigenhändig zu machen. Lerne, parameterisierte Anweisungen zu "
"benutzen, und zwar immer und jedes Mal."

#: s/php.textile.tt2:15
msgid "The MySQL Improved extension handles bound parameters."
msgstr "Die Erweiterung MySQL Improved beherrscht Parameterbindung."

#: s/plsql.textile.tt2:171
msgid ""
"The remedy is to set the format modifier explicitly: @to_char(p_since, 'YYYY-"
"MM-DD')@."
msgstr ""

#: s/postgresql.textile.tt2:7
msgid ""
"The safest way to execute SQL inside a PL/pgSQL statement is just to do so:"
msgstr ""
"Die sicherste Weise, SQL innerhalb einer PL/pgSQL-Anweisung auszuführen:"

#: s/index.textile.tt2:24
msgid ""
"The strip gets one thing crucially wrong.  The answer is not to \"sanitize "
"your database inputs\" yourself.  It is prone to error."
msgstr ""
"Im Comic wird eine Sache falsch gemacht. Die Antwort lautet nicht, die "
"Datenbankeingaben selber zu säubern. Dies ist fehleranfällig."

#: s/index.textile.tt2:17
msgid "There is only one way to avoid Bobby Tables attacks"
msgstr "Man kann Bobby-Tables-Angriffe nur vermeiden,"

#: s/delphi.textile.tt2:3
msgid "To use a prepared statement, do something like this:"
msgstr "Um eine vorbereitete Anweisung zu benutzen:"

#: s/ruby.textile.tt2:15
msgid ""
"Using \"Ruby/DBI\":http://ruby-dbi.rubyforge.org/: analog to \"Perl\":./perl."
"html."
msgstr ""
"\"Ruby/DBI\":http://ruby-dbi.rubyforge.org/ ist analog zu \"Perl\":./perl."
"html."

#: s/python.textile.tt2:3
msgid ""
"Using the \"Python DB API\":http://wiki.python.org/moin/"
"DatabaseProgramming/, don't do this:"
msgstr ""
"Unter Verwendung der \"Python-DB-API\":http://wiki.python.org/moin/"
"DatabaseProgramming/ ist das folgende falsch:"

#: s/perl.textile.tt2:26
msgid ""
"You could also avoid writing SQL by hand by using \"DBIx::Class\":http://"
"p3rl.org/DBIx::Class, \"SQL::Abstract\":http://p3rl.org/SQL::Abstract etc to "
"generate your SQL for you programmatically."
msgstr ""

#: s/postgresql.textile.tt2:27
msgid ""
"bc. CREATE OR REPLACE FUNCTION get_users(\n"
"    p_column TEXT,\n"
"    p_value  TEXT\n"
") RETURNS SETOF users LANGUAGE plpgsql AS $$\n"
"DECLARE\n"
"    query TEXT := 'SELECT * FROM users';\n"
"BEGIN\n"
"    IF p_column IS NOT NULL THEN\n"
"        query := query || ' WHERE ' || p_column\n"
"              || $_$ = '$_$ || p_value || $_$'$_$;\n"
"    END IF;\n"
"    RETURN QUERY EXECUTE query;\n"
"END;\n"
"$$;"
msgstr ""
"bc. CREATE OR REPLACE FUNCTION get_users(\n"
"    p_column TEXT,\n"
"    p_value  TEXT\n"
") RETURNS SETOF users LANGUAGE plpgsql AS $$\n"
"DECLARE\n"
"    query TEXT := 'SELECT * FROM users';\n"
"BEGIN\n"
"    IF p_column IS NOT NULL THEN\n"
"        query := query || ' WHERE ' || p_column\n"
"              || $_$ = '$_$ || p_value || $_$'$_$;\n"
"    END IF;\n"
"    RETURN QUERY EXECUTE query;\n"
"END;\n"
"$$;"

#: s/postgresql.textile.tt2:44
msgid ""
"bc. CREATE OR REPLACE FUNCTION get_users(\n"
"    p_column TEXT,\n"
"    p_value  TEXT\n"
") RETURNS SETOF users LANGUAGE plpgsql AS $$\n"
"DECLARE\n"
"    query TEXT := 'SELECT * FROM users';\n"
"BEGIN\n"
"    IF p_column IS NOT NULL THEN\n"
"        query := query || ' WHERE ' || quote_ident(p_column)\n"
"              || ' = ' || quote_literal(p_value);\n"
"    END IF;\n"
"    RETURN QUERY EXECUTE query;\n"
"END;\n"
"$$;"
msgstr ""
"bc. CREATE OR REPLACE FUNCTION get_users(\n"
"    p_column TEXT,\n"
"    p_value  TEXT\n"
") RETURNS SETOF users LANGUAGE plpgsql AS $$\n"
"DECLARE\n"
"    query TEXT := 'SELECT * FROM users';\n"
"BEGIN\n"
"    IF p_column IS NOT NULL THEN\n"
"        query := query || ' WHERE ' || quote_ident(p_column)\n"
"              || ' = ' || quote_literal(p_value);\n"
"    END IF;\n"
"    RETURN QUERY EXECUTE query;\n"
"END;\n"
"$$;"

#: s/postgresql.textile.tt2:9
msgid ""
"bc. CREATE OR REPLACE FUNCTION user_access (\n"
"    p_uname TEXT\n"
") RETURNS timestamp language plpgsql AS $$\n"
"BEGIN\n"
"    RETURN accessed_at FROM users WHERE username = p_uname;\n"
"END;\n"
"$$;"
msgstr ""
"bc. CREATE OR REPLACE FUNCTION user_access (\n"
"    p_uname TEXT\n"
") RETURNS timestamp language plpgsql AS $$\n"
"BEGIN\n"
"    RETURN accessed_at FROM users WHERE username = p_uname;\n"
"END;\n"
"$$;"

#: s/postgresql.textile.tt2:19
msgid ""
"bc. CREATE OR REPLACE FUNCTION user_access (\n"
"    p_uname TEXT\n"
") RETURNS timestamp language sql AS $$\n"
"    SELECT accessed_at FROM users WHERE username = $1;\n"
"$$;"
msgstr ""
"bc. CREATE OR REPLACE FUNCTION user_access (\n"
"    p_uname TEXT\n"
") RETURNS timestamp language sql AS $$\n"
"    SELECT accessed_at FROM users WHERE username = $1;\n"
"$$;"

#: s/dotnet.textile.tt2:1
msgid "h1. .NET"
msgstr "h1. .NET"

#: s/asp.textile.tt2:1
msgid "h1. ASP"
msgstr "h1. ASP"

#: s/csharp.textile.tt2:1
msgid "h1. C#"
msgstr "h1. C#"

#: s/coldfusion.textile.tt2:1
msgid "h1. ColdFusion"
msgstr "h1. ColdFusion"

#: s/delphi.textile.tt2:1
msgid "h1. Delphi"
msgstr "h1. Delphi"

#: s/index.textile.tt2:26
msgid "h1. Examples"
msgstr "h1. Beispiele"

#: s/index.textile.tt2:15
msgid "h1. How to avoid Bobby Tables"
msgstr "h1. Wie man Bobby Tables vermeidet"

#: s/java.textile.tt2:1
msgid "h1. Java"
msgstr "h1. Java"

#: s/index.textile.tt2:30
msgid "h1. Other random resources"
msgstr "h1. Andere wahllose Ressourcen"

#: s/php.textile.tt2:1
msgid "h1. PHP"
msgstr "h1. PHP"

#: s/plsql.textile.tt2:1
#, fuzzy
msgid "h1. PL/SQL"
msgstr "h2. PL/pgSQL"

#: s/index.textile.tt2:36
msgid "h1. Patches welcome"
msgstr "h1. Verbesserungen sind willkommen"

#: s/perl.textile.tt2:1
msgid "h1. Perl"
msgstr "h1. Perl"

#: s/postgresql.textile.tt2:1
msgid "h1. PostgreSQL"
msgstr "h1. PostgreSQL"

#: s/python.textile.tt2:1
msgid "h1. Python"
msgstr "h1. Python"

#: s/ruby.textile.tt2:1
msgid "h1. Ruby"
msgstr "h1. Ruby"

#: s/scheme.textile.tt2:1
msgid "h1. Scheme"
msgstr "h1. Scheme"

#: s/index.textile.tt2:55
msgid "h1. Thanks"
msgstr "h1. Danksagung"

#: s/index.textile.tt2:50
msgid "h1. To do"
msgstr "h1. In Vorbereitung"

#: s/index.textile.tt2:44
msgid "h1. Translations also welcome"
msgstr "h1. Übersetzungen sind auch willkommen"

#: s/index.textile.tt2:1
msgid "h1. Who is Bobby Tables?"
msgstr "h1. Wer ist Bobby Tables?"

#: s/plsql.textile.tt2:18
msgid "h2. Always prefer static SQL when possible"
msgstr ""

#: s/scheme.textile.tt2:3
msgid "h2. CHICKEN Scheme"
msgstr "h2. CHICKEN Scheme"

#: s/plsql.textile.tt2:50
msgid "h2. If you need dynamic SQL avoid string concatenation when possible"
msgstr ""

#: s/plsql.textile.tt2:116
msgid "h2. Implicit Data Type Conversion Injection"
msgstr ""

#: s/postgresql.textile.tt2:61
msgid "h2. PL/Perl"
msgstr "h2. PL/Perl"

#: s/postgresql.textile.tt2:65
msgid "h2. PL/Python"
msgstr "h2. PL/Python"

#: s/postgresql.textile.tt2:5
msgid "h2. PL/pgSQL"
msgstr "h2. PL/pgSQL"

#: s/asp.textile.tt2:12 s/dotnet.textile.tt2:12 s/java.textile.tt2:13
#: s/perl.textile.tt2:28 s/python.textile.tt2:17 s/ruby.textile.tt2:17
#: s/scheme.textile.tt2:14
msgid "h2. To do"
msgstr "h2. In Vorbereitung"

#: s/php.textile.tt2:23
msgid "h2. Using ADODB"
msgstr "h2. Mittels ADODB"

#: s/php.textile.tt2:13
msgid "h2. Using mysqli"
msgstr "h2. Mittels mysqli"

#: s/php.textile.tt2:35
msgid "h2. Using the ODBC layer"
msgstr "h2. Mittels ODBC"

#: s/php.textile.tt2:51
msgid "h2. Using the PDO layer"
msgstr "h2. Mittels PDO "

#: s/postgresql.textile.tt2:69
msgid "h3. PL/Tcl"
msgstr "h3. PL/Tcl"

#: s/perl.textile.tt2:23
msgid ""
"my $sth = $dbh->prepare(\"SELECT $cols FROM $quoted_table_name ...\");\n"
"</code>"
msgstr ""

#: s/ruby.textile.tt2:9
msgid "or"
msgstr "oder"

#: s/plsql.textile.tt2:204
msgid ""
"v_query = SELECT username FROM users WHERE superuser = 0 and accessed_at >\n"
"'2011-07-04' order by accessed_at desc"
msgstr ""

#: s/plsql.textile.tt2:151
msgid ""
"v_query = SELECT username FROM users WHERE superuser = 0 and accessed_at >\n"
"'2011-07-04SUPRISE!' order by accessed_at desc"
msgstr ""

#: s/plsql.textile.tt2:163
msgid ""
"v_query = SELECT username FROM users WHERE superuser = 0 and accessed_at > "
"''\n"
"or superuser = 1 or username = 'whocares' order by accessed_at desc"
msgstr ""

#~ msgid "About Bobby Tables"
#~ msgstr "Über Bobby Tables"

#~ msgid "About SQL Injection"
#~ msgstr "Über SQL-Einschleusung"

#~ msgid "The Right Way To Do It"
#~ msgstr "So geht's richtig"
